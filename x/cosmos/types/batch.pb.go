// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/v1beta1/batch.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	tx "github.com/cosmos/cosmos-sdk/types/tx"
	types2 "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OutgoingTxBatch struct {
	BatchNonce   uint64               `protobuf:"varint,1,opt,name=batch_nonce,json=batchNonce,proto3" json:"batch_nonce,omitempty"`
	BatchTimeout uint64               `protobuf:"varint,2,opt,name=batch_timeout,json=batchTimeout,proto3" json:"batch_timeout,omitempty"`
	Transactions []OutgoingTransferTx `protobuf:"bytes,3,rep,name=transactions,proto3" json:"transactions"`
	Block        uint64               `protobuf:"varint,5,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *OutgoingTxBatch) Reset()         { *m = OutgoingTxBatch{} }
func (m *OutgoingTxBatch) String() string { return proto.CompactTextString(m) }
func (*OutgoingTxBatch) ProtoMessage()    {}
func (*OutgoingTxBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{0}
}
func (m *OutgoingTxBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutgoingTxBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutgoingTxBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutgoingTxBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutgoingTxBatch.Merge(m, src)
}
func (m *OutgoingTxBatch) XXX_Size() int {
	return m.Size()
}
func (m *OutgoingTxBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_OutgoingTxBatch.DiscardUnknown(m)
}

var xxx_messageInfo_OutgoingTxBatch proto.InternalMessageInfo

func (m *OutgoingTxBatch) GetBatchNonce() uint64 {
	if m != nil {
		return m.BatchNonce
	}
	return 0
}

func (m *OutgoingTxBatch) GetBatchTimeout() uint64 {
	if m != nil {
		return m.BatchTimeout
	}
	return 0
}

func (m *OutgoingTxBatch) GetTransactions() []OutgoingTransferTx {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *OutgoingTxBatch) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

type OutgoingTransferTx struct {
	Id      uint64                                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Message *types.Any                               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" yaml:"public_key"`
	Fees    github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=fees,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fees"`
}

func (m *OutgoingTransferTx) Reset()         { *m = OutgoingTransferTx{} }
func (m *OutgoingTransferTx) String() string { return proto.CompactTextString(m) }
func (*OutgoingTransferTx) ProtoMessage()    {}
func (*OutgoingTransferTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{1}
}
func (m *OutgoingTransferTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutgoingTransferTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutgoingTransferTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutgoingTransferTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutgoingTransferTx.Merge(m, src)
}
func (m *OutgoingTransferTx) XXX_Size() int {
	return m.Size()
}
func (m *OutgoingTransferTx) XXX_DiscardUnknown() {
	xxx_messageInfo_OutgoingTransferTx.DiscardUnknown(m)
}

var xxx_messageInfo_OutgoingTransferTx proto.InternalMessageInfo

func (m *OutgoingTransferTx) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OutgoingTransferTx) GetMessage() *types.Any {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *OutgoingTransferTx) GetFees() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Fees
	}
	return nil
}

type IncomingMintTx struct {
	OrchAddresses []string `protobuf:"bytes,1,rep,name=orch_addresses,json=orchAddresses,proto3" json:"orch_addresses,omitempty"`
	Counter       uint64   `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
}

func (m *IncomingMintTx) Reset()         { *m = IncomingMintTx{} }
func (m *IncomingMintTx) String() string { return proto.CompactTextString(m) }
func (*IncomingMintTx) ProtoMessage()    {}
func (*IncomingMintTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{2}
}
func (m *IncomingMintTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncomingMintTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncomingMintTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncomingMintTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncomingMintTx.Merge(m, src)
}
func (m *IncomingMintTx) XXX_Size() int {
	return m.Size()
}
func (m *IncomingMintTx) XXX_DiscardUnknown() {
	xxx_messageInfo_IncomingMintTx.DiscardUnknown(m)
}

var xxx_messageInfo_IncomingMintTx proto.InternalMessageInfo

func (m *IncomingMintTx) GetOrchAddresses() []string {
	if m != nil {
		return m.OrchAddresses
	}
	return nil
}

func (m *IncomingMintTx) GetCounter() uint64 {
	if m != nil {
		return m.Counter
	}
	return 0
}

type AddressAndAmountKey struct {
	DestinationAddress string      `protobuf:"bytes,1,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	Amount             types1.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
	Acknowledgment     bool        `protobuf:"varint,3,opt,name=acknowledgment,proto3" json:"acknowledgment,omitempty"`
	Minted             bool        `protobuf:"varint,4,opt,name=minted,proto3" json:"minted,omitempty"`
	NativeBlockHeight  int64       `protobuf:"varint,5,opt,name=native_block_height,json=nativeBlockHeight,proto3" json:"native_block_height,omitempty"`
}

func (m *AddressAndAmountKey) Reset()         { *m = AddressAndAmountKey{} }
func (m *AddressAndAmountKey) String() string { return proto.CompactTextString(m) }
func (*AddressAndAmountKey) ProtoMessage()    {}
func (*AddressAndAmountKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{3}
}
func (m *AddressAndAmountKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressAndAmountKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressAndAmountKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressAndAmountKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressAndAmountKey.Merge(m, src)
}
func (m *AddressAndAmountKey) XXX_Size() int {
	return m.Size()
}
func (m *AddressAndAmountKey) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressAndAmountKey.DiscardUnknown(m)
}

var xxx_messageInfo_AddressAndAmountKey proto.InternalMessageInfo

func (m *AddressAndAmountKey) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *AddressAndAmountKey) GetAmount() types1.Coin {
	if m != nil {
		return m.Amount
	}
	return types1.Coin{}
}

func (m *AddressAndAmountKey) GetAcknowledgment() bool {
	if m != nil {
		return m.Acknowledgment
	}
	return false
}

func (m *AddressAndAmountKey) GetMinted() bool {
	if m != nil {
		return m.Minted
	}
	return false
}

func (m *AddressAndAmountKey) GetNativeBlockHeight() int64 {
	if m != nil {
		return m.NativeBlockHeight
	}
	return 0
}

type ChainIDHeightAndTxHashKey struct {
	ChainID     string `protobuf:"bytes,1,opt,name=chain_i_d,json=chainID,proto3" json:"chain_i_d,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	TxHash      string `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (m *ChainIDHeightAndTxHashKey) Reset()         { *m = ChainIDHeightAndTxHashKey{} }
func (m *ChainIDHeightAndTxHashKey) String() string { return proto.CompactTextString(m) }
func (*ChainIDHeightAndTxHashKey) ProtoMessage()    {}
func (*ChainIDHeightAndTxHashKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{4}
}
func (m *ChainIDHeightAndTxHashKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainIDHeightAndTxHashKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainIDHeightAndTxHashKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainIDHeightAndTxHashKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainIDHeightAndTxHashKey.Merge(m, src)
}
func (m *ChainIDHeightAndTxHashKey) XXX_Size() int {
	return m.Size()
}
func (m *ChainIDHeightAndTxHashKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainIDHeightAndTxHashKey.DiscardUnknown(m)
}

var xxx_messageInfo_ChainIDHeightAndTxHashKey proto.InternalMessageInfo

func (m *ChainIDHeightAndTxHashKey) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *ChainIDHeightAndTxHashKey) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ChainIDHeightAndTxHashKey) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

type KeyAndValueForMinting struct {
	Key   ChainIDHeightAndTxHashKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	Value AddressAndAmountKey       `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	Ratio float32                   `protobuf:"fixed32,3,opt,name=ratio,proto3" json:"ratio,omitempty"`
}

func (m *KeyAndValueForMinting) Reset()         { *m = KeyAndValueForMinting{} }
func (m *KeyAndValueForMinting) String() string { return proto.CompactTextString(m) }
func (*KeyAndValueForMinting) ProtoMessage()    {}
func (*KeyAndValueForMinting) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{5}
}
func (m *KeyAndValueForMinting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyAndValueForMinting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyAndValueForMinting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyAndValueForMinting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyAndValueForMinting.Merge(m, src)
}
func (m *KeyAndValueForMinting) XXX_Size() int {
	return m.Size()
}
func (m *KeyAndValueForMinting) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyAndValueForMinting.DiscardUnknown(m)
}

var xxx_messageInfo_KeyAndValueForMinting proto.InternalMessageInfo

func (m *KeyAndValueForMinting) GetKey() ChainIDHeightAndTxHashKey {
	if m != nil {
		return m.Key
	}
	return ChainIDHeightAndTxHashKey{}
}

func (m *KeyAndValueForMinting) GetValue() AddressAndAmountKey {
	if m != nil {
		return m.Value
	}
	return AddressAndAmountKey{}
}

func (m *KeyAndValueForMinting) GetRatio() float32 {
	if m != nil {
		return m.Ratio
	}
	return 0
}

type ProposalKey struct {
	ChainID     string `protobuf:"bytes,1,opt,name=chain_i_d,json=chainID,proto3" json:"chain_i_d,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	ProposalID  uint64 `protobuf:"varint,3,opt,name=proposal_i_d,json=proposalID,proto3" json:"proposal_i_d,omitempty"`
}

func (m *ProposalKey) Reset()         { *m = ProposalKey{} }
func (m *ProposalKey) String() string { return proto.CompactTextString(m) }
func (*ProposalKey) ProtoMessage()    {}
func (*ProposalKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{6}
}
func (m *ProposalKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalKey.Merge(m, src)
}
func (m *ProposalKey) XXX_Size() int {
	return m.Size()
}
func (m *ProposalKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalKey.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalKey proto.InternalMessageInfo

func (m *ProposalKey) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *ProposalKey) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ProposalKey) GetProposalID() uint64 {
	if m != nil {
		return m.ProposalID
	}
	return 0
}

type ProposalValue struct {
	Title                 string    `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description           string    `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	OrchestratorAddresses []string  `protobuf:"bytes,3,rep,name=orchestrator_addresses,json=orchestratorAddresses,proto3" json:"orchestrator_addresses,omitempty"`
	Ratio                 float32   `protobuf:"fixed32,4,opt,name=ratio,proto3" json:"ratio,omitempty"`
	Counter               int64     `protobuf:"varint,5,opt,name=counter,proto3" json:"counter,omitempty"`
	ProposalPosted        bool      `protobuf:"varint,6,opt,name=proposal_posted,json=proposalPosted,proto3" json:"proposal_posted,omitempty"`
	BlockHeight           int64     `protobuf:"varint,7,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	CosmosProposalID      uint64    `protobuf:"varint,8,opt,name=cosmos_proposal_i_d,json=cosmosProposalID,proto3" json:"cosmos_proposal_i_d,omitempty"`
	VotingStartTime       time.Time `protobuf:"bytes,9,opt,name=voting_start_time,json=votingStartTime,proto3,stdtime" json:"voting_start_time,omitempty" yaml:"voting_start_time"`
	VotingEndTime         time.Time `protobuf:"bytes,10,opt,name=voting_end_time,json=votingEndTime,proto3,stdtime" json:"voting_end_time,omitempty" yaml:"voting_end_time"`
}

func (m *ProposalValue) Reset()         { *m = ProposalValue{} }
func (m *ProposalValue) String() string { return proto.CompactTextString(m) }
func (*ProposalValue) ProtoMessage()    {}
func (*ProposalValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{7}
}
func (m *ProposalValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalValue.Merge(m, src)
}
func (m *ProposalValue) XXX_Size() int {
	return m.Size()
}
func (m *ProposalValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalValue.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalValue proto.InternalMessageInfo

func (m *ProposalValue) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ProposalValue) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ProposalValue) GetOrchestratorAddresses() []string {
	if m != nil {
		return m.OrchestratorAddresses
	}
	return nil
}

func (m *ProposalValue) GetRatio() float32 {
	if m != nil {
		return m.Ratio
	}
	return 0
}

func (m *ProposalValue) GetCounter() int64 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *ProposalValue) GetProposalPosted() bool {
	if m != nil {
		return m.ProposalPosted
	}
	return false
}

func (m *ProposalValue) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ProposalValue) GetCosmosProposalID() uint64 {
	if m != nil {
		return m.CosmosProposalID
	}
	return 0
}

func (m *ProposalValue) GetVotingStartTime() time.Time {
	if m != nil {
		return m.VotingStartTime
	}
	return time.Time{}
}

func (m *ProposalValue) GetVotingEndTime() time.Time {
	if m != nil {
		return m.VotingEndTime
	}
	return time.Time{}
}

type KeyAndValueForProposal struct {
	Key   ProposalKey   `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	Value ProposalValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
}

func (m *KeyAndValueForProposal) Reset()         { *m = KeyAndValueForProposal{} }
func (m *KeyAndValueForProposal) String() string { return proto.CompactTextString(m) }
func (*KeyAndValueForProposal) ProtoMessage()    {}
func (*KeyAndValueForProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{8}
}
func (m *KeyAndValueForProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyAndValueForProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyAndValueForProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyAndValueForProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyAndValueForProposal.Merge(m, src)
}
func (m *KeyAndValueForProposal) XXX_Size() int {
	return m.Size()
}
func (m *KeyAndValueForProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyAndValueForProposal.DiscardUnknown(m)
}

var xxx_messageInfo_KeyAndValueForProposal proto.InternalMessageInfo

func (m *KeyAndValueForProposal) GetKey() ProposalKey {
	if m != nil {
		return m.Key
	}
	return ProposalKey{}
}

func (m *KeyAndValueForProposal) GetValue() ProposalValue {
	if m != nil {
		return m.Value
	}
	return ProposalValue{}
}

type CosmosTx struct {
	Tx                tx.Tx  `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx"`
	EventEmitted      bool   `protobuf:"varint,2,opt,name=event_emitted,json=eventEmitted,proto3" json:"event_emitted,omitempty"`
	Status            string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	TxHash            string `protobuf:"bytes,4,opt,name=txHash,proto3" json:"txHash,omitempty"`
	NativeBlockHeight int64  `protobuf:"varint,5,opt,name=native_block_height,json=nativeBlockHeight,proto3" json:"native_block_height,omitempty"`
	ActiveBlockHeight int64  `protobuf:"varint,6,opt,name=active_block_height,json=activeBlockHeight,proto3" json:"active_block_height,omitempty"`
}

func (m *CosmosTx) Reset()         { *m = CosmosTx{} }
func (m *CosmosTx) String() string { return proto.CompactTextString(m) }
func (*CosmosTx) ProtoMessage()    {}
func (*CosmosTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{9}
}
func (m *CosmosTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CosmosTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CosmosTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CosmosTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CosmosTx.Merge(m, src)
}
func (m *CosmosTx) XXX_Size() int {
	return m.Size()
}
func (m *CosmosTx) XXX_DiscardUnknown() {
	xxx_messageInfo_CosmosTx.DiscardUnknown(m)
}

var xxx_messageInfo_CosmosTx proto.InternalMessageInfo

func (m *CosmosTx) GetTx() tx.Tx {
	if m != nil {
		return m.Tx
	}
	return tx.Tx{}
}

func (m *CosmosTx) GetEventEmitted() bool {
	if m != nil {
		return m.EventEmitted
	}
	return false
}

func (m *CosmosTx) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *CosmosTx) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *CosmosTx) GetNativeBlockHeight() int64 {
	if m != nil {
		return m.NativeBlockHeight
	}
	return 0
}

func (m *CosmosTx) GetActiveBlockHeight() int64 {
	if m != nil {
		return m.ActiveBlockHeight
	}
	return 0
}

type TxHashValue struct {
	TxID                  uint64   `protobuf:"varint,1,opt,name=txID,proto3" json:"txID,omitempty"`
	OrchestratorAddresses []string `protobuf:"bytes,2,rep,name=orchestrator_addresses,json=orchestratorAddresses,proto3" json:"orchestrator_addresses,omitempty"`
	Status                []string `protobuf:"bytes,3,rep,name=status,proto3" json:"status,omitempty"`
	Ratio                 float32  `protobuf:"fixed32,4,opt,name=ratio,proto3" json:"ratio,omitempty"`
	TxCleared             bool     `protobuf:"varint,5,opt,name=tx_cleared,json=txCleared,proto3" json:"tx_cleared,omitempty"`
	Counter               int64    `protobuf:"varint,6,opt,name=counter,proto3" json:"counter,omitempty"`
	NativeBlockHeight     int64    `protobuf:"varint,7,opt,name=native_block_height,json=nativeBlockHeight,proto3" json:"native_block_height,omitempty"`
	ActiveBlockHeight     int64    `protobuf:"varint,8,opt,name=active_block_height,json=activeBlockHeight,proto3" json:"active_block_height,omitempty"`
}

func (m *TxHashValue) Reset()         { *m = TxHashValue{} }
func (m *TxHashValue) String() string { return proto.CompactTextString(m) }
func (*TxHashValue) ProtoMessage()    {}
func (*TxHashValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{10}
}
func (m *TxHashValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxHashValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxHashValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxHashValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxHashValue.Merge(m, src)
}
func (m *TxHashValue) XXX_Size() int {
	return m.Size()
}
func (m *TxHashValue) XXX_DiscardUnknown() {
	xxx_messageInfo_TxHashValue.DiscardUnknown(m)
}

var xxx_messageInfo_TxHashValue proto.InternalMessageInfo

func (m *TxHashValue) GetTxID() uint64 {
	if m != nil {
		return m.TxID
	}
	return 0
}

func (m *TxHashValue) GetOrchestratorAddresses() []string {
	if m != nil {
		return m.OrchestratorAddresses
	}
	return nil
}

func (m *TxHashValue) GetStatus() []string {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TxHashValue) GetRatio() float32 {
	if m != nil {
		return m.Ratio
	}
	return 0
}

func (m *TxHashValue) GetTxCleared() bool {
	if m != nil {
		return m.TxCleared
	}
	return false
}

func (m *TxHashValue) GetCounter() int64 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *TxHashValue) GetNativeBlockHeight() int64 {
	if m != nil {
		return m.NativeBlockHeight
	}
	return 0
}

func (m *TxHashValue) GetActiveBlockHeight() int64 {
	if m != nil {
		return m.ActiveBlockHeight
	}
	return 0
}

type WithdrawStoreValue struct {
	WithdrawDetails []MsgWithdrawStkAsset `protobuf:"bytes,1,rep,name=withdraw_details,json=withdrawDetails,proto3" json:"withdraw_details"`
	UnbondEmitFlag  []bool                `protobuf:"varint,2,rep,packed,name=unbond_emit_flag,json=unbondEmitFlag,proto3" json:"unbond_emit_flag,omitempty"`
}

func (m *WithdrawStoreValue) Reset()         { *m = WithdrawStoreValue{} }
func (m *WithdrawStoreValue) String() string { return proto.CompactTextString(m) }
func (*WithdrawStoreValue) ProtoMessage()    {}
func (*WithdrawStoreValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{11}
}
func (m *WithdrawStoreValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawStoreValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawStoreValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawStoreValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawStoreValue.Merge(m, src)
}
func (m *WithdrawStoreValue) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawStoreValue) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawStoreValue.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawStoreValue proto.InternalMessageInfo

func (m *WithdrawStoreValue) GetWithdrawDetails() []MsgWithdrawStkAsset {
	if m != nil {
		return m.WithdrawDetails
	}
	return nil
}

func (m *WithdrawStoreValue) GetUnbondEmitFlag() []bool {
	if m != nil {
		return m.UnbondEmitFlag
	}
	return nil
}

type ValueOutgoingUnbondStore struct {
	EpochNumber        int64                  `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	UndelegateMessages []types2.MsgUndelegate `protobuf:"bytes,2,rep,name=undelegate_messages,json=undelegateMessages,proto3" json:"undelegate_messages"`
}

func (m *ValueOutgoingUnbondStore) Reset()         { *m = ValueOutgoingUnbondStore{} }
func (m *ValueOutgoingUnbondStore) String() string { return proto.CompactTextString(m) }
func (*ValueOutgoingUnbondStore) ProtoMessage()    {}
func (*ValueOutgoingUnbondStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{12}
}
func (m *ValueOutgoingUnbondStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueOutgoingUnbondStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueOutgoingUnbondStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueOutgoingUnbondStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueOutgoingUnbondStore.Merge(m, src)
}
func (m *ValueOutgoingUnbondStore) XXX_Size() int {
	return m.Size()
}
func (m *ValueOutgoingUnbondStore) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueOutgoingUnbondStore.DiscardUnknown(m)
}

var xxx_messageInfo_ValueOutgoingUnbondStore proto.InternalMessageInfo

func (m *ValueOutgoingUnbondStore) GetEpochNumber() int64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *ValueOutgoingUnbondStore) GetUndelegateMessages() []types2.MsgUndelegate {
	if m != nil {
		return m.UndelegateMessages
	}
	return nil
}

type ValidatorStoreValue struct {
	OrchestratorAddresses []string `protobuf:"bytes,1,rep,name=orchestrator_addresses,json=orchestratorAddresses,proto3" json:"orchestrator_addresses,omitempty"`
}

func (m *ValidatorStoreValue) Reset()         { *m = ValidatorStoreValue{} }
func (m *ValidatorStoreValue) String() string { return proto.CompactTextString(m) }
func (*ValidatorStoreValue) ProtoMessage()    {}
func (*ValidatorStoreValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{13}
}
func (m *ValidatorStoreValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorStoreValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorStoreValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorStoreValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorStoreValue.Merge(m, src)
}
func (m *ValidatorStoreValue) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorStoreValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorStoreValue.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorStoreValue proto.InternalMessageInfo

func (m *ValidatorStoreValue) GetOrchestratorAddresses() []string {
	if m != nil {
		return m.OrchestratorAddresses
	}
	return nil
}

type StakingEpochValue struct {
	EpochMintingTxns []KeyAndValueForMinting `protobuf:"bytes,1,rep,name=epochMintingTxns,proto3" json:"epochMintingTxns"`
}

func (m *StakingEpochValue) Reset()         { *m = StakingEpochValue{} }
func (m *StakingEpochValue) String() string { return proto.CompactTextString(m) }
func (*StakingEpochValue) ProtoMessage()    {}
func (*StakingEpochValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{14}
}
func (m *StakingEpochValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakingEpochValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakingEpochValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakingEpochValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakingEpochValue.Merge(m, src)
}
func (m *StakingEpochValue) XXX_Size() int {
	return m.Size()
}
func (m *StakingEpochValue) XXX_DiscardUnknown() {
	xxx_messageInfo_StakingEpochValue.DiscardUnknown(m)
}

var xxx_messageInfo_StakingEpochValue proto.InternalMessageInfo

func (m *StakingEpochValue) GetEpochMintingTxns() []KeyAndValueForMinting {
	if m != nil {
		return m.EpochMintingTxns
	}
	return nil
}

type MintingEpochValueMember struct {
	TxID   uint64 `protobuf:"varint,1,opt,name=txID,proto3" json:"txID,omitempty"`
	Status bool   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MintingEpochValueMember) Reset()         { *m = MintingEpochValueMember{} }
func (m *MintingEpochValueMember) String() string { return proto.CompactTextString(m) }
func (*MintingEpochValueMember) ProtoMessage()    {}
func (*MintingEpochValueMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{15}
}
func (m *MintingEpochValueMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintingEpochValueMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MintingEpochValueMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MintingEpochValueMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintingEpochValueMember.Merge(m, src)
}
func (m *MintingEpochValueMember) XXX_Size() int {
	return m.Size()
}
func (m *MintingEpochValueMember) XXX_DiscardUnknown() {
	xxx_messageInfo_MintingEpochValueMember.DiscardUnknown(m)
}

var xxx_messageInfo_MintingEpochValueMember proto.InternalMessageInfo

func (m *MintingEpochValueMember) GetTxID() uint64 {
	if m != nil {
		return m.TxID
	}
	return 0
}

func (m *MintingEpochValueMember) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type MintingEpochValue struct {
	TxIDAndStatus []MintingEpochValueMember `protobuf:"bytes,1,rep,name=tx_i_d_and_status,json=txIDAndStatus,proto3" json:"tx_i_d_and_status"`
}

func (m *MintingEpochValue) Reset()         { *m = MintingEpochValue{} }
func (m *MintingEpochValue) String() string { return proto.CompactTextString(m) }
func (*MintingEpochValue) ProtoMessage()    {}
func (*MintingEpochValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{16}
}
func (m *MintingEpochValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintingEpochValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MintingEpochValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MintingEpochValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintingEpochValue.Merge(m, src)
}
func (m *MintingEpochValue) XXX_Size() int {
	return m.Size()
}
func (m *MintingEpochValue) XXX_DiscardUnknown() {
	xxx_messageInfo_MintingEpochValue.DiscardUnknown(m)
}

var xxx_messageInfo_MintingEpochValue proto.InternalMessageInfo

func (m *MintingEpochValue) GetTxIDAndStatus() []MintingEpochValueMember {
	if m != nil {
		return m.TxIDAndStatus
	}
	return nil
}

type RewardsClaimedValue struct {
	OrchestratorAddresses []string      `protobuf:"bytes,1,rep,name=orchestrator_addresses,json=orchestratorAddresses,proto3" json:"orchestrator_addresses,omitempty"`
	Amount                []types1.Coin `protobuf:"bytes,2,rep,name=amount,proto3" json:"amount"`
	Ratio                 float32       `protobuf:"fixed32,3,opt,name=ratio,proto3" json:"ratio,omitempty"`
	Counter               int64         `protobuf:"varint,4,opt,name=counter,proto3" json:"counter,omitempty"`
	AddedToCurrentEpoch   bool          `protobuf:"varint,5,opt,name=added_to_current_epoch,json=addedToCurrentEpoch,proto3" json:"added_to_current_epoch,omitempty"`
	NativeBlockHeight     int64         `protobuf:"varint,6,opt,name=native_block_height,json=nativeBlockHeight,proto3" json:"native_block_height,omitempty"`
	ActiveBlockHeight     int64         `protobuf:"varint,7,opt,name=active_block_height,json=activeBlockHeight,proto3" json:"active_block_height,omitempty"`
}

func (m *RewardsClaimedValue) Reset()         { *m = RewardsClaimedValue{} }
func (m *RewardsClaimedValue) String() string { return proto.CompactTextString(m) }
func (*RewardsClaimedValue) ProtoMessage()    {}
func (*RewardsClaimedValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{17}
}
func (m *RewardsClaimedValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsClaimedValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsClaimedValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsClaimedValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsClaimedValue.Merge(m, src)
}
func (m *RewardsClaimedValue) XXX_Size() int {
	return m.Size()
}
func (m *RewardsClaimedValue) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsClaimedValue.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsClaimedValue proto.InternalMessageInfo

func (m *RewardsClaimedValue) GetOrchestratorAddresses() []string {
	if m != nil {
		return m.OrchestratorAddresses
	}
	return nil
}

func (m *RewardsClaimedValue) GetAmount() []types1.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *RewardsClaimedValue) GetRatio() float32 {
	if m != nil {
		return m.Ratio
	}
	return 0
}

func (m *RewardsClaimedValue) GetCounter() int64 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *RewardsClaimedValue) GetAddedToCurrentEpoch() bool {
	if m != nil {
		return m.AddedToCurrentEpoch
	}
	return false
}

func (m *RewardsClaimedValue) GetNativeBlockHeight() int64 {
	if m != nil {
		return m.NativeBlockHeight
	}
	return 0
}

func (m *RewardsClaimedValue) GetActiveBlockHeight() int64 {
	if m != nil {
		return m.ActiveBlockHeight
	}
	return 0
}

type ValueUndelegateSuccessStore struct {
	ValidatorAddress      string      `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	OrchestratorAddresses []string    `protobuf:"bytes,2,rep,name=orchestrator_addresses,json=orchestratorAddresses,proto3" json:"orchestrator_addresses,omitempty"`
	Ratio                 float32     `protobuf:"fixed32,3,opt,name=ratio,proto3" json:"ratio,omitempty"`
	Amount                types1.Coin `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount"`
	Counter               int64       `protobuf:"varint,5,opt,name=counter,proto3" json:"counter,omitempty"`
	NativeBlockHeight     int64       `protobuf:"varint,7,opt,name=native_block_height,json=nativeBlockHeight,proto3" json:"native_block_height,omitempty"`
	ActiveBlockHeight     int64       `protobuf:"varint,8,opt,name=active_block_height,json=activeBlockHeight,proto3" json:"active_block_height,omitempty"`
}

func (m *ValueUndelegateSuccessStore) Reset()         { *m = ValueUndelegateSuccessStore{} }
func (m *ValueUndelegateSuccessStore) String() string { return proto.CompactTextString(m) }
func (*ValueUndelegateSuccessStore) ProtoMessage()    {}
func (*ValueUndelegateSuccessStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{18}
}
func (m *ValueUndelegateSuccessStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueUndelegateSuccessStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueUndelegateSuccessStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueUndelegateSuccessStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueUndelegateSuccessStore.Merge(m, src)
}
func (m *ValueUndelegateSuccessStore) XXX_Size() int {
	return m.Size()
}
func (m *ValueUndelegateSuccessStore) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueUndelegateSuccessStore.DiscardUnknown(m)
}

var xxx_messageInfo_ValueUndelegateSuccessStore proto.InternalMessageInfo

func (m *ValueUndelegateSuccessStore) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *ValueUndelegateSuccessStore) GetOrchestratorAddresses() []string {
	if m != nil {
		return m.OrchestratorAddresses
	}
	return nil
}

func (m *ValueUndelegateSuccessStore) GetRatio() float32 {
	if m != nil {
		return m.Ratio
	}
	return 0
}

func (m *ValueUndelegateSuccessStore) GetAmount() types1.Coin {
	if m != nil {
		return m.Amount
	}
	return types1.Coin{}
}

func (m *ValueUndelegateSuccessStore) GetCounter() int64 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *ValueUndelegateSuccessStore) GetNativeBlockHeight() int64 {
	if m != nil {
		return m.NativeBlockHeight
	}
	return 0
}

func (m *ValueUndelegateSuccessStore) GetActiveBlockHeight() int64 {
	if m != nil {
		return m.ActiveBlockHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*OutgoingTxBatch)(nil), "comsos.v1beta1.OutgoingTxBatch")
	proto.RegisterType((*OutgoingTransferTx)(nil), "comsos.v1beta1.OutgoingTransferTx")
	proto.RegisterType((*IncomingMintTx)(nil), "comsos.v1beta1.IncomingMintTx")
	proto.RegisterType((*AddressAndAmountKey)(nil), "comsos.v1beta1.AddressAndAmountKey")
	proto.RegisterType((*ChainIDHeightAndTxHashKey)(nil), "comsos.v1beta1.ChainIDHeightAndTxHashKey")
	proto.RegisterType((*KeyAndValueForMinting)(nil), "comsos.v1beta1.KeyAndValueForMinting")
	proto.RegisterType((*ProposalKey)(nil), "comsos.v1beta1.ProposalKey")
	proto.RegisterType((*ProposalValue)(nil), "comsos.v1beta1.ProposalValue")
	proto.RegisterType((*KeyAndValueForProposal)(nil), "comsos.v1beta1.KeyAndValueForProposal")
	proto.RegisterType((*CosmosTx)(nil), "comsos.v1beta1.CosmosTx")
	proto.RegisterType((*TxHashValue)(nil), "comsos.v1beta1.TxHashValue")
	proto.RegisterType((*WithdrawStoreValue)(nil), "comsos.v1beta1.WithdrawStoreValue")
	proto.RegisterType((*ValueOutgoingUnbondStore)(nil), "comsos.v1beta1.ValueOutgoingUnbondStore")
	proto.RegisterType((*ValidatorStoreValue)(nil), "comsos.v1beta1.ValidatorStoreValue")
	proto.RegisterType((*StakingEpochValue)(nil), "comsos.v1beta1.StakingEpochValue")
	proto.RegisterType((*MintingEpochValueMember)(nil), "comsos.v1beta1.MintingEpochValueMember")
	proto.RegisterType((*MintingEpochValue)(nil), "comsos.v1beta1.MintingEpochValue")
	proto.RegisterType((*RewardsClaimedValue)(nil), "comsos.v1beta1.RewardsClaimedValue")
	proto.RegisterType((*ValueUndelegateSuccessStore)(nil), "comsos.v1beta1.ValueUndelegateSuccessStore")
}

func init() { proto.RegisterFile("cosmos/v1beta1/batch.proto", fileDescriptor_cbd4e547303b7d7c) }

var fileDescriptor_cbd4e547303b7d7c = []byte{
	// 1565 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xbd, 0x6f, 0x1b, 0xc7,
	0x12, 0xd7, 0x91, 0x34, 0x25, 0x2d, 0xf5, 0xb9, 0xb4, 0x64, 0x4a, 0x7e, 0x16, 0xf5, 0xce, 0xf0,
	0xb3, 0x1e, 0xfc, 0x4c, 0x3e, 0xcb, 0x78, 0x2f, 0x48, 0x1a, 0x83, 0xfa, 0x30, 0x2c, 0xd8, 0xb2,
	0x95, 0x13, 0x6d, 0x03, 0x41, 0x80, 0xc3, 0xf2, 0x6e, 0x75, 0x3c, 0xe8, 0x6e, 0x97, 0xb8, 0x5d,
	0x4a, 0xc7, 0x3a, 0x4d, 0x80, 0x34, 0x2e, 0xd2, 0xa5, 0x48, 0x9f, 0x2e, 0x75, 0x90, 0xde, 0x30,
	0x52, 0xb8, 0x4c, 0x25, 0x07, 0x76, 0x17, 0x04, 0x08, 0xe0, 0xbf, 0x20, 0xd8, 0x8f, 0x23, 0x8f,
	0x5f, 0x0a, 0x94, 0x8f, 0x8a, 0xdc, 0x99, 0x9d, 0xd9, 0x99, 0xdf, 0xcc, 0x6f, 0x76, 0x0f, 0xac,
	0x3a, 0x94, 0x85, 0x94, 0x55, 0x4f, 0xee, 0x34, 0x30, 0x47, 0x77, 0xaa, 0x0d, 0xc4, 0x9d, 0x66,
	0xa5, 0x15, 0x51, 0x4e, 0xe1, 0x9c, 0x43, 0x43, 0x46, 0x59, 0x45, 0xeb, 0x56, 0x2f, 0x7b, 0xd4,
	0xa3, 0x52, 0x55, 0x15, 0xff, 0xd4, 0xae, 0xd5, 0x7f, 0x78, 0x94, 0x7a, 0x01, 0xae, 0xa2, 0x96,
	0x5f, 0x45, 0x84, 0x50, 0x8e, 0xb8, 0x4f, 0x09, 0xd3, 0xda, 0x15, 0xad, 0x95, 0xab, 0x46, 0xfb,
	0xa8, 0x8a, 0x48, 0x47, 0xab, 0xca, 0x83, 0x2a, 0xee, 0x87, 0x98, 0x71, 0x14, 0xb6, 0x12, 0xdb,
	0x81, 0xd8, 0x42, 0xe6, 0x25, 0x6e, 0xd7, 0xb4, 0xaa, 0x81, 0x18, 0xee, 0xea, 0x1d, 0xea, 0x13,
	0xad, 0x4f, 0xd2, 0xe2, 0x71, 0x57, 0xcb, 0xe3, 0x7e, 0xb7, 0xb6, 0xca, 0x44, 0x2d, 0x92, 0x90,
	0xb4, 0x19, 0xe3, 0xe8, 0xd8, 0x27, 0xde, 0x90, 0xad, 0xf9, 0x9d, 0x01, 0xe6, 0x9f, 0xb4, 0xb9,
	0x47, 0x7d, 0xe2, 0xd5, 0xe3, 0x2d, 0x01, 0x16, 0x2c, 0x83, 0x82, 0x44, 0xcd, 0x26, 0x94, 0x38,
	0xb8, 0x64, 0xac, 0x1b, 0x1b, 0x39, 0x0b, 0x48, 0xd1, 0x63, 0x21, 0x81, 0xd7, 0xc1, 0xac, 0xda,
	0x20, 0x12, 0xa4, 0x6d, 0x5e, 0xca, 0xc8, 0x2d, 0x33, 0x52, 0x58, 0x57, 0x32, 0xf8, 0x08, 0xcc,
	0xf0, 0x08, 0x11, 0x86, 0x1c, 0x09, 0x5f, 0x29, 0xbb, 0x9e, 0xdd, 0x28, 0x6c, 0x9a, 0x95, 0xfe,
	0x1a, 0x54, 0xba, 0x87, 0x8b, 0xbd, 0x47, 0x38, 0xaa, 0xc7, 0x5b, 0xb9, 0x97, 0x67, 0xe5, 0x09,
	0xab, 0xcf, 0x1a, 0x5e, 0x06, 0x97, 0x1a, 0x01, 0x75, 0x8e, 0x4b, 0x97, 0xe4, 0x51, 0x6a, 0x61,
	0xfe, 0x60, 0x00, 0x38, 0xec, 0x00, 0xce, 0x81, 0x8c, 0xef, 0xea, 0xb8, 0x33, 0xbe, 0x0b, 0x77,
	0xc1, 0x64, 0x88, 0x19, 0x43, 0x1e, 0x96, 0x91, 0x16, 0x36, 0x2f, 0x57, 0x54, 0xa9, 0x2a, 0x49,
	0xa9, 0x2a, 0x35, 0xd2, 0xd9, 0x5a, 0x7a, 0x7f, 0x56, 0x5e, 0xec, 0xa0, 0x30, 0xf8, 0xc8, 0x6c,
	0xb5, 0x1b, 0x81, 0xef, 0xd8, 0xc7, 0xb8, 0x63, 0x5a, 0x89, 0x2d, 0xb4, 0x41, 0xee, 0x08, 0xe3,
	0x24, 0x93, 0x95, 0x8a, 0x46, 0x5a, 0x94, 0xac, 0x9b, 0xce, 0x36, 0xf5, 0xc9, 0xd6, 0x7f, 0x45,
	0x02, 0xdf, 0xbc, 0x29, 0x6f, 0x78, 0x3e, 0x6f, 0xb6, 0x1b, 0x22, 0x65, 0x5d, 0x16, 0xfd, 0x73,
	0x9b, 0xb9, 0xc7, 0x55, 0xde, 0x69, 0x61, 0x26, 0x0d, 0x98, 0x25, 0x1d, 0x9b, 0x1f, 0x83, 0xb9,
	0x3d, 0xe2, 0xd0, 0xd0, 0x27, 0xde, 0xbe, 0x4f, 0x78, 0x3d, 0x86, 0x37, 0xc0, 0x1c, 0x8d, 0x9c,
	0xa6, 0x8d, 0x5c, 0x37, 0xc2, 0x8c, 0x61, 0x56, 0x32, 0xd6, 0xb3, 0x1b, 0xd3, 0xd6, 0xac, 0x90,
	0xd6, 0x12, 0x21, 0x2c, 0x81, 0x49, 0x87, 0xb6, 0x09, 0xc7, 0x91, 0x2e, 0x45, 0xb2, 0x34, 0x7f,
	0x35, 0x40, 0x51, 0xef, 0xab, 0x11, 0xb7, 0x16, 0x0a, 0xf1, 0x43, 0xdc, 0x81, 0x55, 0x50, 0x74,
	0x31, 0xe3, 0x3e, 0x91, 0xcd, 0x9d, 0xf8, 0x97, 0x98, 0x4d, 0x5b, 0x30, 0xa5, 0xd2, 0xc6, 0xf0,
	0x03, 0x90, 0x47, 0xd2, 0x5a, 0x43, 0x78, 0x4e, 0xfa, 0xaa, 0x7e, 0x7a, 0x3b, 0xfc, 0x17, 0x98,
	0x43, 0xce, 0x31, 0xa1, 0xa7, 0x01, 0x76, 0xbd, 0x10, 0x13, 0x5e, 0xca, 0xae, 0x1b, 0x1b, 0x53,
	0xd6, 0x80, 0x14, 0x2e, 0x83, 0x7c, 0xe8, 0x13, 0x8e, 0xdd, 0x52, 0x4e, 0xea, 0xf5, 0x0a, 0x56,
	0x40, 0x51, 0x44, 0x72, 0x82, 0x6d, 0x59, 0x73, 0xbb, 0x89, 0x7d, 0xaf, 0xc9, 0x65, 0x1f, 0x64,
	0xad, 0x45, 0xa5, 0xda, 0x12, 0x9a, 0x07, 0x52, 0x61, 0x32, 0xb0, 0xb2, 0xdd, 0x44, 0x3e, 0xd9,
	0xdb, 0x51, 0x82, 0x1a, 0x71, 0xeb, 0xf1, 0x03, 0xc4, 0x9a, 0x22, 0xed, 0x55, 0x30, 0xed, 0x08,
	0xa5, 0xed, 0xdb, 0xae, 0x4e, 0x76, 0xd2, 0x51, 0xbb, 0xe1, 0x3f, 0xc1, 0x4c, 0xdf, 0x09, 0x19,
	0x79, 0x42, 0xa1, 0xd1, 0xf3, 0x0d, 0xaf, 0x80, 0x49, 0x1e, 0xdb, 0x4d, 0xc4, 0x9a, 0x32, 0x89,
	0x69, 0x2b, 0xcf, 0xa5, 0x6b, 0xf3, 0x5b, 0x03, 0x2c, 0x3d, 0xc4, 0x9d, 0x1a, 0x71, 0x9f, 0xa1,
	0xa0, 0x8d, 0xef, 0xd3, 0x48, 0x14, 0xd0, 0x27, 0x1e, 0xac, 0x81, 0xec, 0x31, 0xee, 0xc8, 0xb3,
	0x0a, 0x9b, 0xff, 0x1e, 0xec, 0xfe, 0xb1, 0x91, 0x6a, 0x10, 0x85, 0x2d, 0xbc, 0x07, 0x2e, 0x9d,
	0x08, 0xaf, 0x1a, 0xf9, 0xeb, 0x83, 0x4e, 0x46, 0xd4, 0x57, 0x9b, 0x2b, 0x3b, 0x41, 0x9e, 0x48,
	0x14, 0x53, 0x06, 0x9d, 0xb1, 0xd4, 0xc2, 0x24, 0xa0, 0x70, 0x10, 0xd1, 0x16, 0x65, 0x28, 0xf8,
	0x0b, 0xa0, 0x59, 0x07, 0x33, 0x2d, 0xed, 0x4d, 0x7a, 0xc8, 0xaa, 0xa9, 0x91, 0xc8, 0xf6, 0x76,
	0xcc, 0xef, 0x73, 0x60, 0x36, 0x39, 0xf0, 0x59, 0x12, 0x17, 0xf7, 0x79, 0x80, 0xf5, 0x71, 0x6a,
	0x01, 0xd7, 0x41, 0xc1, 0xc5, 0xcc, 0x89, 0xfc, 0x96, 0xe8, 0x3f, 0x79, 0xd6, 0xb4, 0x95, 0x16,
	0xc1, 0xff, 0x81, 0x65, 0xd1, 0xff, 0x98, 0xf1, 0x08, 0x71, 0x1a, 0xa5, 0xd8, 0x91, 0x95, 0xec,
	0x58, 0x4a, 0x6b, 0x7b, 0x2c, 0xe9, 0xc2, 0x90, 0x4b, 0xc1, 0x90, 0xe6, 0x8e, 0xea, 0xa9, 0x64,
	0x09, 0x6f, 0x82, 0xf9, 0x6e, 0x4a, 0x2d, 0xca, 0x44, 0x6b, 0xe6, 0x55, 0xeb, 0x26, 0xe2, 0x03,
	0x29, 0x1d, 0x82, 0x67, 0x72, 0x18, 0x9e, 0xdb, 0xa0, 0xd8, 0x9b, 0xd2, 0x3d, 0x94, 0xa6, 0x24,
	0x4a, 0x0b, 0x4a, 0x75, 0xd0, 0xc5, 0x0a, 0x7e, 0x61, 0x80, 0xc5, 0x13, 0x2a, 0x1a, 0xc8, 0x66,
	0x1c, 0x45, 0x5c, 0x4e, 0xda, 0xd2, 0xb4, 0xac, 0xff, 0xea, 0xd0, 0xf0, 0xaa, 0x27, 0xf7, 0xcc,
	0xd6, 0xb6, 0x28, 0xfb, 0xcf, 0x67, 0xe5, 0xab, 0x43, 0xc6, 0xff, 0xa1, 0xa1, 0xcf, 0x71, 0xd8,
	0xe2, 0x9d, 0xf7, 0x67, 0xe5, 0x92, 0x9a, 0x72, 0x43, 0x9b, 0xcc, 0x17, 0x6f, 0xca, 0x86, 0x35,
	0xaf, 0xe4, 0x87, 0x42, 0x2c, 0x5c, 0xc3, 0xcf, 0x0c, 0xa0, 0x65, 0x36, 0x26, 0xae, 0x8a, 0x05,
	0xfc, 0x6e, 0x2c, 0xf7, 0x74, 0x2c, 0x2b, 0x03, 0xa6, 0x7d, 0x91, 0x2c, 0xf7, 0x45, 0x92, 0x6c,
	0x51, 0x71, 0xcc, 0x2a, 0xe9, 0x2e, 0x71, 0x85, 0x53, 0xf3, 0x73, 0x03, 0x2c, 0xf7, 0x73, 0x2c,
	0x01, 0x0c, 0xde, 0x4d, 0x93, 0xec, 0xea, 0x20, 0x3f, 0x52, 0x5d, 0x9e, 0xa6, 0xd5, 0x87, 0xfd,
	0xb4, 0xba, 0x36, 0xce, 0x4c, 0x9e, 0xd6, 0x47, 0x28, 0xf3, 0x17, 0x03, 0x4c, 0x6d, 0xcb, 0x9a,
	0xd5, 0x63, 0x78, 0x0b, 0x64, 0x78, 0xac, 0xcf, 0x5e, 0x4a, 0xa6, 0x22, 0x8f, 0xbb, 0x7e, 0xba,
	0x37, 0x5a, 0x86, 0xc7, 0xe2, 0xea, 0xc4, 0x27, 0x98, 0x70, 0x1b, 0x87, 0x3e, 0x17, 0x1d, 0x95,
	0x91, 0x1d, 0x35, 0x23, 0x85, 0xbb, 0x4a, 0x26, 0x46, 0x21, 0xe3, 0x88, 0xb7, 0x59, 0x32, 0x65,
	0xd4, 0x4a, 0xc8, 0xd5, 0xbc, 0x91, 0x1d, 0xdc, 0x9d, 0x3e, 0x17, 0x1d, 0x91, 0x62, 0xbf, 0xb8,
	0x57, 0x07, 0xf7, 0xe7, 0xd5, 0x7e, 0xa5, 0x4a, 0x8f, 0xd4, 0xaf, 0x33, 0xa0, 0xa0, 0x26, 0x93,
	0xe2, 0x2d, 0x04, 0x39, 0x1e, 0xef, 0xed, 0xe8, 0x1b, 0x56, 0xfe, 0x3f, 0x87, 0x93, 0x99, 0xf3,
	0x38, 0x99, 0x4e, 0x35, 0x9b, 0x4a, 0x75, 0x34, 0x57, 0xaf, 0x01, 0xc0, 0x63, 0xdb, 0x09, 0x30,
	0x8a, 0xb0, 0x2b, 0xf3, 0x9b, 0xb2, 0xa6, 0x79, 0xbc, 0xad, 0x04, 0x69, 0x2a, 0xe7, 0xfb, 0xa9,
	0x3c, 0x06, 0xa1, 0xc9, 0x0b, 0x22, 0x34, 0x35, 0x0e, 0xa1, 0x2f, 0x0d, 0x00, 0x9f, 0xfb, 0xbc,
	0xe9, 0x46, 0xe8, 0xf4, 0x90, 0xd3, 0x08, 0x2b, 0xa0, 0xea, 0x60, 0xe1, 0x54, 0x4b, 0x6d, 0x17,
	0x73, 0xe4, 0x07, 0xea, 0x02, 0x1f, 0x31, 0xc4, 0xf7, 0x99, 0xd7, 0x73, 0x70, 0x5c, 0x63, 0x0c,
	0x73, 0xdd, 0x36, 0xf3, 0x89, 0x8b, 0x1d, 0xe5, 0x01, 0x6e, 0x80, 0x85, 0x36, 0x69, 0x50, 0xe2,
	0xca, 0x26, 0xb2, 0x8f, 0x02, 0xe4, 0x49, 0x90, 0xa7, 0xac, 0x39, 0x25, 0x17, 0x7d, 0x74, 0x3f,
	0x40, 0x9e, 0xf9, 0x95, 0x01, 0x4a, 0x32, 0x92, 0xe4, 0x91, 0xf4, 0x54, 0xea, 0x65, 0x84, 0x62,
	0x6a, 0xe1, 0x16, 0x15, 0xcf, 0xbc, 0x76, 0xd8, 0xc0, 0x91, 0xac, 0x66, 0xd6, 0x2a, 0x48, 0xd9,
	0x63, 0x29, 0x82, 0x9f, 0x82, 0x62, 0x9b, 0xb8, 0x38, 0xc0, 0x1e, 0xe2, 0xd8, 0xd6, 0xef, 0x20,
	0x55, 0xd1, 0xc2, 0xe6, 0x8d, 0xa4, 0xd7, 0xf5, 0xe3, 0x32, 0x9d, 0xca, 0xd3, 0xae, 0x95, 0x4e,
	0x02, 0xf6, 0xfc, 0xec, 0x6b, 0x37, 0xe6, 0x23, 0x50, 0x7c, 0x86, 0x02, 0xdf, 0x15, 0x1d, 0x91,
	0x02, 0x6d, 0x7c, 0x27, 0x19, 0xe7, 0x74, 0x92, 0x19, 0x80, 0xc5, 0x43, 0x15, 0xc8, 0xae, 0xc8,
	0x40, 0xf9, 0x7a, 0x0e, 0x16, 0x64, 0x3e, 0xfa, 0x36, 0xae, 0xc7, 0x24, 0x29, 0xc0, 0x8d, 0xc1,
	0x02, 0x8c, 0xbc, 0xbe, 0x75, 0xf4, 0x43, 0x4e, 0xcc, 0x5d, 0x70, 0x45, 0x2f, 0x7b, 0xa7, 0xed,
	0x63, 0x09, 0xda, 0x28, 0x76, 0xf4, 0xda, 0x5c, 0xf1, 0x5d, 0xaf, 0x44, 0xd0, 0x43, 0x6e, 0xe0,
	0x73, 0xb0, 0xc8, 0x63, 0x71, 0x3d, 0xd8, 0x88, 0xb8, 0xb6, 0xb6, 0x53, 0x51, 0xdf, 0x1c, 0x6a,
	0x9b, 0xd1, 0x41, 0xe8, 0xb8, 0x67, 0xc5, 0xe1, 0x35, 0x51, 0x70, 0x79, 0xda, 0xab, 0x0c, 0x28,
	0x5a, 0xf8, 0x14, 0x45, 0x2e, 0xdb, 0x0e, 0x90, 0x1f, 0x62, 0xf7, 0xcf, 0x20, 0xde, 0xf7, 0x24,
	0xcc, 0x5e, 0xe4, 0x49, 0x38, 0xf2, 0x3d, 0x92, 0x66, 0x6f, 0xae, 0x9f, 0xbd, 0x77, 0xc1, 0x32,
	0x72, 0x5d, 0xec, 0xda, 0x9c, 0xda, 0x4e, 0x3b, 0x8a, 0xe4, 0xfc, 0x14, 0x19, 0xeb, 0x11, 0x50,
	0x94, 0xda, 0x3a, 0xdd, 0x56, 0x3a, 0x09, 0xc6, 0x38, 0xca, 0xe7, 0x2f, 0x48, 0xf9, 0xc9, 0x71,
	0x94, 0x7f, 0x95, 0x01, 0x57, 0x25, 0x7c, 0xbd, 0x5e, 0x3f, 0x6c, 0x3b, 0x0e, 0x66, 0x4c, 0xd1,
	0xeb, 0x16, 0x58, 0x3c, 0x49, 0xba, 0x7b, 0xe0, 0x7d, 0xbd, 0xd0, 0x55, 0x24, 0xaf, 0xeb, 0x3f,
	0x38, 0x3d, 0x47, 0x03, 0xd9, 0xab, 0x4b, 0xee, 0x62, 0x4f, 0xf5, 0xf1, 0x4f, 0xa1, 0xbf, 0x79,
	0x7e, 0x6e, 0x1d, 0xbc, 0x7c, 0xbb, 0x66, 0xbc, 0x7e, 0xbb, 0x66, 0xfc, 0xf4, 0x76, 0xcd, 0x78,
	0xf1, 0x6e, 0x6d, 0xe2, 0xf5, 0xbb, 0xb5, 0x89, 0x1f, 0xdf, 0xad, 0x4d, 0x7c, 0xf2, 0xff, 0xd4,
	0x37, 0x54, 0x0b, 0x47, 0xcc, 0x67, 0x1c, 0x13, 0x07, 0x3f, 0x21, 0xb8, 0xda, 0x12, 0x7c, 0xc7,
	0xb7, 0xd5, 0xe9, 0xd5, 0x38, 0xf9, 0xc4, 0x92, 0xdf, 0x55, 0x8d, 0xbc, 0x7c, 0x91, 0xdc, 0xfd,
	0x2d, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x34, 0xb4, 0x32, 0x10, 0x10, 0x00, 0x00,
}

func (m *OutgoingTxBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutgoingTxBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutgoingTxBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Block != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBatch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.BatchTimeout != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.BatchTimeout))
		i--
		dAtA[i] = 0x10
	}
	if m.BatchNonce != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.BatchNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OutgoingTransferTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutgoingTransferTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutgoingTransferTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fees) > 0 {
		for iNdEx := len(m.Fees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBatch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IncomingMintTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncomingMintTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncomingMintTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Counter != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OrchAddresses) > 0 {
		for iNdEx := len(m.OrchAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrchAddresses[iNdEx])
			copy(dAtA[i:], m.OrchAddresses[iNdEx])
			i = encodeVarintBatch(dAtA, i, uint64(len(m.OrchAddresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddressAndAmountKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressAndAmountKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressAndAmountKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NativeBlockHeight != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.NativeBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.Minted {
		i--
		if m.Minted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Acknowledgment {
		i--
		if m.Acknowledgment {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBatch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.DestinationAddress) > 0 {
		i -= len(m.DestinationAddress)
		copy(dAtA[i:], m.DestinationAddress)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.DestinationAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChainIDHeightAndTxHashKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainIDHeightAndTxHashKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainIDHeightAndTxHashKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyAndValueForMinting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyAndValueForMinting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyAndValueForMinting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ratio != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Ratio))))
		i--
		dAtA[i] = 0x1d
	}
	{
		size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBatch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBatch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ProposalKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProposalID != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.ProposalID))
		i--
		dAtA[i] = 0x18
	}
	if m.BlockHeight != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.VotingEndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.VotingEndTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintBatch(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x52
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.VotingStartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.VotingStartTime):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintBatch(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x4a
	if m.CosmosProposalID != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.CosmosProposalID))
		i--
		dAtA[i] = 0x40
	}
	if m.BlockHeight != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x38
	}
	if m.ProposalPosted {
		i--
		if m.ProposalPosted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Counter != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x28
	}
	if m.Ratio != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Ratio))))
		i--
		dAtA[i] = 0x25
	}
	if len(m.OrchestratorAddresses) > 0 {
		for iNdEx := len(m.OrchestratorAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrchestratorAddresses[iNdEx])
			copy(dAtA[i:], m.OrchestratorAddresses[iNdEx])
			i = encodeVarintBatch(dAtA, i, uint64(len(m.OrchestratorAddresses[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyAndValueForProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyAndValueForProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyAndValueForProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBatch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBatch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CosmosTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CosmosTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CosmosTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActiveBlockHeight != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.ActiveBlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.NativeBlockHeight != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.NativeBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EventEmitted {
		i--
		if m.EventEmitted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBatch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TxHashValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxHashValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxHashValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActiveBlockHeight != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.ActiveBlockHeight))
		i--
		dAtA[i] = 0x40
	}
	if m.NativeBlockHeight != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.NativeBlockHeight))
		i--
		dAtA[i] = 0x38
	}
	if m.Counter != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x30
	}
	if m.TxCleared {
		i--
		if m.TxCleared {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Ratio != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Ratio))))
		i--
		dAtA[i] = 0x25
	}
	if len(m.Status) > 0 {
		for iNdEx := len(m.Status) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Status[iNdEx])
			copy(dAtA[i:], m.Status[iNdEx])
			i = encodeVarintBatch(dAtA, i, uint64(len(m.Status[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.OrchestratorAddresses) > 0 {
		for iNdEx := len(m.OrchestratorAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrchestratorAddresses[iNdEx])
			copy(dAtA[i:], m.OrchestratorAddresses[iNdEx])
			i = encodeVarintBatch(dAtA, i, uint64(len(m.OrchestratorAddresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TxID != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.TxID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawStoreValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawStoreValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawStoreValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnbondEmitFlag) > 0 {
		for iNdEx := len(m.UnbondEmitFlag) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.UnbondEmitFlag[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintBatch(dAtA, i, uint64(len(m.UnbondEmitFlag)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WithdrawDetails) > 0 {
		for iNdEx := len(m.WithdrawDetails) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WithdrawDetails[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBatch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValueOutgoingUnbondStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueOutgoingUnbondStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueOutgoingUnbondStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UndelegateMessages) > 0 {
		for iNdEx := len(m.UndelegateMessages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UndelegateMessages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBatch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.EpochNumber != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorStoreValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorStoreValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorStoreValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrchestratorAddresses) > 0 {
		for iNdEx := len(m.OrchestratorAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrchestratorAddresses[iNdEx])
			copy(dAtA[i:], m.OrchestratorAddresses[iNdEx])
			i = encodeVarintBatch(dAtA, i, uint64(len(m.OrchestratorAddresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StakingEpochValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakingEpochValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakingEpochValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EpochMintingTxns) > 0 {
		for iNdEx := len(m.EpochMintingTxns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EpochMintingTxns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBatch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MintingEpochValueMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintingEpochValueMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintingEpochValueMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.TxID != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.TxID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MintingEpochValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintingEpochValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintingEpochValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxIDAndStatus) > 0 {
		for iNdEx := len(m.TxIDAndStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TxIDAndStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBatch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RewardsClaimedValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsClaimedValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsClaimedValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActiveBlockHeight != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.ActiveBlockHeight))
		i--
		dAtA[i] = 0x38
	}
	if m.NativeBlockHeight != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.NativeBlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.AddedToCurrentEpoch {
		i--
		if m.AddedToCurrentEpoch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Counter != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x20
	}
	if m.Ratio != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Ratio))))
		i--
		dAtA[i] = 0x1d
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBatch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.OrchestratorAddresses) > 0 {
		for iNdEx := len(m.OrchestratorAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrchestratorAddresses[iNdEx])
			copy(dAtA[i:], m.OrchestratorAddresses[iNdEx])
			i = encodeVarintBatch(dAtA, i, uint64(len(m.OrchestratorAddresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValueUndelegateSuccessStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueUndelegateSuccessStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueUndelegateSuccessStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActiveBlockHeight != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.ActiveBlockHeight))
		i--
		dAtA[i] = 0x40
	}
	if m.NativeBlockHeight != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.NativeBlockHeight))
		i--
		dAtA[i] = 0x38
	}
	if m.Counter != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBatch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Ratio != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Ratio))))
		i--
		dAtA[i] = 0x1d
	}
	if len(m.OrchestratorAddresses) > 0 {
		for iNdEx := len(m.OrchestratorAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrchestratorAddresses[iNdEx])
			copy(dAtA[i:], m.OrchestratorAddresses[iNdEx])
			i = encodeVarintBatch(dAtA, i, uint64(len(m.OrchestratorAddresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBatch(dAtA []byte, offset int, v uint64) int {
	offset -= sovBatch(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OutgoingTxBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchNonce != 0 {
		n += 1 + sovBatch(uint64(m.BatchNonce))
	}
	if m.BatchTimeout != 0 {
		n += 1 + sovBatch(uint64(m.BatchTimeout))
	}
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	if m.Block != 0 {
		n += 1 + sovBatch(uint64(m.Block))
	}
	return n
}

func (m *OutgoingTransferTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBatch(uint64(m.Id))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovBatch(uint64(l))
	}
	if len(m.Fees) > 0 {
		for _, e := range m.Fees {
			l = e.Size()
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	return n
}

func (m *IncomingMintTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OrchAddresses) > 0 {
		for _, s := range m.OrchAddresses {
			l = len(s)
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	if m.Counter != 0 {
		n += 1 + sovBatch(uint64(m.Counter))
	}
	return n
}

func (m *AddressAndAmountKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DestinationAddress)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovBatch(uint64(l))
	if m.Acknowledgment {
		n += 2
	}
	if m.Minted {
		n += 2
	}
	if m.NativeBlockHeight != 0 {
		n += 1 + sovBatch(uint64(m.NativeBlockHeight))
	}
	return n
}

func (m *ChainIDHeightAndTxHashKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovBatch(uint64(m.BlockHeight))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	return n
}

func (m *KeyAndValueForMinting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Key.Size()
	n += 1 + l + sovBatch(uint64(l))
	l = m.Value.Size()
	n += 1 + l + sovBatch(uint64(l))
	if m.Ratio != 0 {
		n += 5
	}
	return n
}

func (m *ProposalKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovBatch(uint64(m.BlockHeight))
	}
	if m.ProposalID != 0 {
		n += 1 + sovBatch(uint64(m.ProposalID))
	}
	return n
}

func (m *ProposalValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	if len(m.OrchestratorAddresses) > 0 {
		for _, s := range m.OrchestratorAddresses {
			l = len(s)
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	if m.Ratio != 0 {
		n += 5
	}
	if m.Counter != 0 {
		n += 1 + sovBatch(uint64(m.Counter))
	}
	if m.ProposalPosted {
		n += 2
	}
	if m.BlockHeight != 0 {
		n += 1 + sovBatch(uint64(m.BlockHeight))
	}
	if m.CosmosProposalID != 0 {
		n += 1 + sovBatch(uint64(m.CosmosProposalID))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.VotingStartTime)
	n += 1 + l + sovBatch(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.VotingEndTime)
	n += 1 + l + sovBatch(uint64(l))
	return n
}

func (m *KeyAndValueForProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Key.Size()
	n += 1 + l + sovBatch(uint64(l))
	l = m.Value.Size()
	n += 1 + l + sovBatch(uint64(l))
	return n
}

func (m *CosmosTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Tx.Size()
	n += 1 + l + sovBatch(uint64(l))
	if m.EventEmitted {
		n += 2
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	if m.NativeBlockHeight != 0 {
		n += 1 + sovBatch(uint64(m.NativeBlockHeight))
	}
	if m.ActiveBlockHeight != 0 {
		n += 1 + sovBatch(uint64(m.ActiveBlockHeight))
	}
	return n
}

func (m *TxHashValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxID != 0 {
		n += 1 + sovBatch(uint64(m.TxID))
	}
	if len(m.OrchestratorAddresses) > 0 {
		for _, s := range m.OrchestratorAddresses {
			l = len(s)
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	if len(m.Status) > 0 {
		for _, s := range m.Status {
			l = len(s)
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	if m.Ratio != 0 {
		n += 5
	}
	if m.TxCleared {
		n += 2
	}
	if m.Counter != 0 {
		n += 1 + sovBatch(uint64(m.Counter))
	}
	if m.NativeBlockHeight != 0 {
		n += 1 + sovBatch(uint64(m.NativeBlockHeight))
	}
	if m.ActiveBlockHeight != 0 {
		n += 1 + sovBatch(uint64(m.ActiveBlockHeight))
	}
	return n
}

func (m *WithdrawStoreValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WithdrawDetails) > 0 {
		for _, e := range m.WithdrawDetails {
			l = e.Size()
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	if len(m.UnbondEmitFlag) > 0 {
		n += 1 + sovBatch(uint64(len(m.UnbondEmitFlag))) + len(m.UnbondEmitFlag)*1
	}
	return n
}

func (m *ValueOutgoingUnbondStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNumber != 0 {
		n += 1 + sovBatch(uint64(m.EpochNumber))
	}
	if len(m.UndelegateMessages) > 0 {
		for _, e := range m.UndelegateMessages {
			l = e.Size()
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	return n
}

func (m *ValidatorStoreValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OrchestratorAddresses) > 0 {
		for _, s := range m.OrchestratorAddresses {
			l = len(s)
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	return n
}

func (m *StakingEpochValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EpochMintingTxns) > 0 {
		for _, e := range m.EpochMintingTxns {
			l = e.Size()
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	return n
}

func (m *MintingEpochValueMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxID != 0 {
		n += 1 + sovBatch(uint64(m.TxID))
	}
	if m.Status {
		n += 2
	}
	return n
}

func (m *MintingEpochValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TxIDAndStatus) > 0 {
		for _, e := range m.TxIDAndStatus {
			l = e.Size()
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	return n
}

func (m *RewardsClaimedValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OrchestratorAddresses) > 0 {
		for _, s := range m.OrchestratorAddresses {
			l = len(s)
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	if m.Ratio != 0 {
		n += 5
	}
	if m.Counter != 0 {
		n += 1 + sovBatch(uint64(m.Counter))
	}
	if m.AddedToCurrentEpoch {
		n += 2
	}
	if m.NativeBlockHeight != 0 {
		n += 1 + sovBatch(uint64(m.NativeBlockHeight))
	}
	if m.ActiveBlockHeight != 0 {
		n += 1 + sovBatch(uint64(m.ActiveBlockHeight))
	}
	return n
}

func (m *ValueUndelegateSuccessStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	if len(m.OrchestratorAddresses) > 0 {
		for _, s := range m.OrchestratorAddresses {
			l = len(s)
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	if m.Ratio != 0 {
		n += 5
	}
	l = m.Amount.Size()
	n += 1 + l + sovBatch(uint64(l))
	if m.Counter != 0 {
		n += 1 + sovBatch(uint64(m.Counter))
	}
	if m.NativeBlockHeight != 0 {
		n += 1 + sovBatch(uint64(m.NativeBlockHeight))
	}
	if m.ActiveBlockHeight != 0 {
		n += 1 + sovBatch(uint64(m.ActiveBlockHeight))
	}
	return n
}

func sovBatch(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBatch(x uint64) (n int) {
	return sovBatch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OutgoingTxBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutgoingTxBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutgoingTxBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNonce", wireType)
			}
			m.BatchNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchTimeout", wireType)
			}
			m.BatchTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchTimeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, OutgoingTransferTx{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutgoingTransferTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutgoingTransferTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutgoingTransferTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &types.Any{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = append(m.Fees, types1.Coin{})
			if err := m.Fees[len(m.Fees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncomingMintTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncomingMintTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncomingMintTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchAddresses = append(m.OrchAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressAndAmountKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressAndAmountKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressAndAmountKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acknowledgment", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Acknowledgment = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Minted = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeBlockHeight", wireType)
			}
			m.NativeBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NativeBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainIDHeightAndTxHashKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainIDHeightAndTxHashKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainIDHeightAndTxHashKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyAndValueForMinting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyAndValueForMinting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyAndValueForMinting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Ratio = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalID", wireType)
			}
			m.ProposalID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddresses = append(m.OrchestratorAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Ratio = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalPosted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProposalPosted = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosProposalID", wireType)
			}
			m.CosmosProposalID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CosmosProposalID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.VotingStartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.VotingEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyAndValueForProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyAndValueForProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyAndValueForProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CosmosTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CosmosTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CosmosTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventEmitted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EventEmitted = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeBlockHeight", wireType)
			}
			m.NativeBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NativeBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveBlockHeight", wireType)
			}
			m.ActiveBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxHashValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxHashValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxHashValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			m.TxID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddresses = append(m.OrchestratorAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = append(m.Status, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Ratio = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxCleared", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TxCleared = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeBlockHeight", wireType)
			}
			m.NativeBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NativeBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveBlockHeight", wireType)
			}
			m.ActiveBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawStoreValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawStoreValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawStoreValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawDetails = append(m.WithdrawDetails, MsgWithdrawStkAsset{})
			if err := m.WithdrawDetails[len(m.WithdrawDetails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UnbondEmitFlag = append(m.UnbondEmitFlag, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBatch
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBatch
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.UnbondEmitFlag) == 0 {
					m.UnbondEmitFlag = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UnbondEmitFlag = append(m.UnbondEmitFlag, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondEmitFlag", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValueOutgoingUnbondStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueOutgoingUnbondStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueOutgoingUnbondStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndelegateMessages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UndelegateMessages = append(m.UndelegateMessages, types2.MsgUndelegate{})
			if err := m.UndelegateMessages[len(m.UndelegateMessages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorStoreValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorStoreValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorStoreValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddresses = append(m.OrchestratorAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakingEpochValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakingEpochValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakingEpochValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochMintingTxns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochMintingTxns = append(m.EpochMintingTxns, KeyAndValueForMinting{})
			if err := m.EpochMintingTxns[len(m.EpochMintingTxns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MintingEpochValueMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintingEpochValueMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintingEpochValueMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			m.TxID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MintingEpochValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintingEpochValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintingEpochValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxIDAndStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxIDAndStatus = append(m.TxIDAndStatus, MintingEpochValueMember{})
			if err := m.TxIDAndStatus[len(m.TxIDAndStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardsClaimedValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsClaimedValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsClaimedValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddresses = append(m.OrchestratorAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types1.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Ratio = float32(math.Float32frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedToCurrentEpoch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddedToCurrentEpoch = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeBlockHeight", wireType)
			}
			m.NativeBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NativeBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveBlockHeight", wireType)
			}
			m.ActiveBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValueUndelegateSuccessStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueUndelegateSuccessStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueUndelegateSuccessStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddresses = append(m.OrchestratorAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Ratio = float32(math.Float32frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeBlockHeight", wireType)
			}
			m.NativeBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NativeBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveBlockHeight", wireType)
			}
			m.ActiveBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBatch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBatch
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBatch
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBatch
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBatch        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBatch          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBatch = fmt.Errorf("proto: unexpected end of group")
)
