// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pstake/cosmos/v1beta1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types_tx "github.com/cosmos/cosmos-sdk/types/tx"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StakeAmount struct {
	Denom  string                                   `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount" yaml:"amount"`
}

func (m *StakeAmount) Reset()         { *m = StakeAmount{} }
func (m *StakeAmount) String() string { return proto.CompactTextString(m) }
func (*StakeAmount) ProtoMessage()    {}
func (*StakeAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_055a3386b7737e3a, []int{0}
}
func (m *StakeAmount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakeAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakeAmount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakeAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakeAmount.Merge(m, src)
}
func (m *StakeAmount) XXX_Size() int {
	return m.Size()
}
func (m *StakeAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_StakeAmount.DiscardUnknown(m)
}

var xxx_messageInfo_StakeAmount proto.InternalMessageInfo

func (m *StakeAmount) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type DelegationCosmos struct {
	Address string      `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Stake   StakeAmount `protobuf:"bytes,2,opt,name=stake,proto3" json:"stake" yaml:"stake"`
}

func (m *DelegationCosmos) Reset()         { *m = DelegationCosmos{} }
func (m *DelegationCosmos) String() string { return proto.CompactTextString(m) }
func (*DelegationCosmos) ProtoMessage()    {}
func (*DelegationCosmos) Descriptor() ([]byte, []int) {
	return fileDescriptor_055a3386b7737e3a, []int{1}
}
func (m *DelegationCosmos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationCosmos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationCosmos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationCosmos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationCosmos.Merge(m, src)
}
func (m *DelegationCosmos) XXX_Size() int {
	return m.Size()
}
func (m *DelegationCosmos) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationCosmos.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationCosmos proto.InternalMessageInfo

func (m *DelegationCosmos) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *DelegationCosmos) GetStake() StakeAmount {
	if m != nil {
		return m.Stake
	}
	return StakeAmount{}
}

type IncomingTx struct {
	TxResponse github_com_cosmos_cosmos_sdk_types.TxResponse `protobuf:"bytes,1,opt,name=tx_response,json=txResponse,proto3,customtype=github.com/cosmos/cosmos-sdk/types.TxResponse" json:"tx_response" yaml:"tx_response"`
}

func (m *IncomingTx) Reset()         { *m = IncomingTx{} }
func (m *IncomingTx) String() string { return proto.CompactTextString(m) }
func (*IncomingTx) ProtoMessage()    {}
func (*IncomingTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_055a3386b7737e3a, []int{2}
}
func (m *IncomingTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncomingTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncomingTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncomingTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncomingTx.Merge(m, src)
}
func (m *IncomingTx) XXX_Size() int {
	return m.Size()
}
func (m *IncomingTx) XXX_DiscardUnknown() {
	xxx_messageInfo_IncomingTx.DiscardUnknown(m)
}

var xxx_messageInfo_IncomingTx proto.InternalMessageInfo

type OutgoingTx struct {
	TxBody github_com_cosmos_cosmos_sdk_types_tx.TxBody `protobuf:"bytes,1,opt,name=tx_body,json=txBody,proto3,customtype=github.com/cosmos/cosmos-sdk/types/tx.TxBody" json:"tx_body" yaml:"tx_body"`
}

func (m *OutgoingTx) Reset()         { *m = OutgoingTx{} }
func (m *OutgoingTx) String() string { return proto.CompactTextString(m) }
func (*OutgoingTx) ProtoMessage()    {}
func (*OutgoingTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_055a3386b7737e3a, []int{3}
}
func (m *OutgoingTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutgoingTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutgoingTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutgoingTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutgoingTx.Merge(m, src)
}
func (m *OutgoingTx) XXX_Size() int {
	return m.Size()
}
func (m *OutgoingTx) XXX_DiscardUnknown() {
	xxx_messageInfo_OutgoingTx.DiscardUnknown(m)
}

var xxx_messageInfo_OutgoingTx proto.InternalMessageInfo

type GenesisState struct {
	Params            Params             `protobuf:"bytes,1,opt,name=params,proto3" json:"params" yaml:"params"`
	CosmosDelegations []DelegationCosmos `protobuf:"bytes,2,rep,name=cosmos_delegations,json=cosmosDelegations,proto3" json:"cosmos_delegations" yaml:"cosmos_delegations"`
	IncomingTxn       []IncomingTx       `protobuf:"bytes,3,rep,name=incoming_txn,json=incomingTxn,proto3" json:"incoming_txn" yaml:"incoming_txn"`
	OutgoingTxn       OutgoingTx         `protobuf:"bytes,4,opt,name=outgoing_txn,json=outgoingTxn,proto3" json:"outgoing_txn" yaml:"outgoing_txn"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_055a3386b7737e3a, []int{4}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetCosmosDelegations() []DelegationCosmos {
	if m != nil {
		return m.CosmosDelegations
	}
	return nil
}

func (m *GenesisState) GetIncomingTxn() []IncomingTx {
	if m != nil {
		return m.IncomingTxn
	}
	return nil
}

func (m *GenesisState) GetOutgoingTxn() OutgoingTx {
	if m != nil {
		return m.OutgoingTxn
	}
	return OutgoingTx{}
}

func init() {
	proto.RegisterType((*StakeAmount)(nil), "pstake.comsos.v1beta1.StakeAmount")
	proto.RegisterType((*DelegationCosmos)(nil), "pstake.comsos.v1beta1.DelegationCosmos")
	proto.RegisterType((*IncomingTx)(nil), "pstake.comsos.v1beta1.IncomingTx")
	proto.RegisterType((*OutgoingTx)(nil), "pstake.comsos.v1beta1.OutgoingTx")
	proto.RegisterType((*GenesisState)(nil), "pstake.comsos.v1beta1.GenesisState")
}

func init() {
	proto.RegisterFile("pstake/cosmos/v1beta1/genesis.proto", fileDescriptor_055a3386b7737e3a)
}

var fileDescriptor_055a3386b7737e3a = []byte{
	// 606 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0x4f, 0x6e, 0xd3, 0x40,
	0x14, 0xc6, 0xe3, 0x86, 0xa6, 0xea, 0x38, 0x20, 0x30, 0xa9, 0x94, 0x06, 0xb0, 0xd3, 0x61, 0xd1,
	0x2c, 0x88, 0x47, 0x0d, 0x12, 0x0b, 0x76, 0xb8, 0x08, 0x84, 0x40, 0xb4, 0x72, 0xb3, 0x62, 0x13,
	0x4d, 0xe2, 0xc1, 0x58, 0x8d, 0x67, 0xac, 0xcc, 0xa4, 0xb2, 0x11, 0x4b, 0x0e, 0xc0, 0x05, 0xb8,
	0x40, 0x4f, 0xd2, 0x65, 0x97, 0x88, 0x85, 0x41, 0xc9, 0x0d, 0x72, 0x02, 0xe4, 0x99, 0xc9, 0x1f,
	0x95, 0x46, 0xed, 0x2a, 0x99, 0xcc, 0xf7, 0xbe, 0xdf, 0xbc, 0xf7, 0x3d, 0x05, 0x3c, 0x4d, 0xb8,
	0xc0, 0xa7, 0x04, 0x0d, 0x18, 0x8f, 0x19, 0x47, 0x67, 0x07, 0x7d, 0x22, 0xf0, 0x01, 0x0a, 0x09,
	0x25, 0x3c, 0xe2, 0x6e, 0x32, 0x62, 0x82, 0x59, 0x3b, 0x4a, 0xe4, 0x0e, 0x58, 0xcc, 0x19, 0x77,
	0xb5, 0xa8, 0x51, 0x0b, 0x59, 0xc8, 0xa4, 0x02, 0x15, 0xdf, 0x94, 0xb8, 0xf1, 0x38, 0x64, 0x2c,
	0x1c, 0x12, 0x84, 0x93, 0x08, 0x61, 0x4a, 0x99, 0xc0, 0x22, 0x62, 0x54, 0x5b, 0x35, 0x76, 0xf5,
	0xad, 0x3c, 0xf5, 0xc7, 0x9f, 0x11, 0xa6, 0x99, 0xbe, 0x82, 0xd7, 0x3f, 0x45, 0x1d, 0x95, 0x06,
	0x9e, 0x1b, 0xc0, 0x3c, 0x29, 0x54, 0xaf, 0x62, 0x36, 0xa6, 0xc2, 0xaa, 0x81, 0xcd, 0x80, 0x50,
	0x16, 0xd7, 0x8d, 0xa6, 0xd1, 0xda, 0xf6, 0xd5, 0xc1, 0xfa, 0x6e, 0x80, 0x0a, 0x96, 0x82, 0x7a,
	0xb9, 0x59, 0x6e, 0x6d, 0x7b, 0xc3, 0x8b, 0xdc, 0x29, 0xfd, 0xce, 0x9d, 0xfd, 0x30, 0x12, 0x5f,
	0xc6, 0xfd, 0xa2, 0x91, 0x39, 0x46, 0x7d, 0xb4, 0x79, 0x70, 0x8a, 0x44, 0x96, 0x10, 0xee, 0x1e,
	0xb2, 0x88, 0xce, 0x72, 0xe7, 0x6e, 0x86, 0xe3, 0xe1, 0x4b, 0xa8, 0x6c, 0xe0, 0xf9, 0x1f, 0xa7,
	0x75, 0xcb, 0x5a, 0xee, 0x6b, 0x36, 0xfc, 0x06, 0xee, 0xbf, 0x26, 0x43, 0x12, 0xca, 0x01, 0x1c,
	0x4a, 0xad, 0x55, 0x07, 0x5b, 0x38, 0x08, 0x46, 0x84, 0x73, 0xfd, 0xe4, 0xf9, 0xd1, 0xfa, 0x08,
	0x36, 0x65, 0xff, 0xf5, 0x8d, 0xa6, 0xd1, 0x32, 0x3b, 0xd0, 0xbd, 0x76, 0xe8, 0xee, 0x4a, 0xf7,
	0x5e, 0xad, 0x68, 0x6b, 0x96, 0x3b, 0x55, 0xf5, 0x56, 0xa9, 0x87, 0xbe, 0xb2, 0x81, 0x5f, 0x01,
	0x78, 0x47, 0x07, 0x2c, 0x8e, 0x68, 0xd8, 0x4d, 0xad, 0x21, 0x30, 0x45, 0xda, 0x1b, 0x11, 0x9e,
	0x30, 0xca, 0x89, 0x62, 0x7b, 0xef, 0xf5, 0x58, 0xda, 0xb7, 0x68, 0xad, 0x9b, 0xfa, 0xba, 0x78,
	0x96, 0x3b, 0x96, 0x02, 0xae, 0x38, 0x42, 0x1f, 0x88, 0x85, 0x02, 0xc6, 0x00, 0x1c, 0x8d, 0x45,
	0xc8, 0x14, 0xbb, 0x07, 0xb6, 0x44, 0xda, 0xeb, 0xb3, 0x20, 0xd3, 0xdc, 0x37, 0x9a, 0xfb, 0xec,
	0x66, 0x2e, 0x12, 0xa9, 0xdb, 0x4d, 0x3d, 0x16, 0x64, 0xb3, 0xdc, 0xb9, 0xb7, 0xc0, 0x16, 0x66,
	0xd0, 0xaf, 0x08, 0x79, 0x03, 0x7f, 0x96, 0x41, 0xf5, 0xad, 0xda, 0xd8, 0x13, 0x81, 0x05, 0xb1,
	0x3e, 0x80, 0x4a, 0x82, 0x47, 0x38, 0x56, 0x43, 0x36, 0x3b, 0x4f, 0x96, 0xc3, 0x94, 0xcb, 0x34,
	0x1f, 0xe6, 0xb1, 0x14, 0x79, 0x3b, 0x7a, 0x8e, 0x3a, 0x73, 0x55, 0x0a, 0x7d, 0xed, 0x61, 0x65,
	0xc0, 0x52, 0x75, 0xbd, 0x60, 0x11, 0x27, 0xaf, 0x6f, 0x34, 0xcb, 0x2d, 0xb3, 0xb3, 0xbf, 0x26,
	0xa6, 0xab, 0xc1, 0x7b, 0x7b, 0x9a, 0xb1, 0xab, 0x18, 0xff, 0x1b, 0x42, 0xff, 0x81, 0xfa, 0x71,
	0x59, 0xca, 0x2d, 0x0c, 0xaa, 0x91, 0x0e, 0xb1, 0x27, 0x52, 0x2a, 0xd7, 0xd9, 0xec, 0xec, 0xad,
	0x81, 0x2e, 0xf3, 0xf6, 0x1e, 0x69, 0xdc, 0x43, 0x85, 0x5b, 0x35, 0x81, 0xbe, 0x19, 0x2d, 0x84,
	0xb4, 0x40, 0x30, 0x9d, 0x95, 0x44, 0xdc, 0x91, 0x13, 0x5b, 0x87, 0x58, 0xc6, 0x7a, 0x15, 0xb1,
	0x6a, 0x02, 0x7d, 0x93, 0x2d, 0x84, 0xd4, 0x3b, 0xbe, 0x98, 0xd8, 0xc6, 0xe5, 0xc4, 0x36, 0xfe,
	0x4e, 0x6c, 0xe3, 0xc7, 0xd4, 0x2e, 0x5d, 0x4e, 0xed, 0xd2, 0xaf, 0xa9, 0x5d, 0xfa, 0xf4, 0x62,
	0x65, 0x03, 0x12, 0x32, 0xe2, 0x11, 0x17, 0x84, 0x0e, 0xc8, 0x11, 0x25, 0x28, 0x91, 0x9b, 0xde,
	0xa6, 0x58, 0x44, 0x67, 0x04, 0xa5, 0xf3, 0x05, 0x91, 0x5b, 0xd1, 0xaf, 0xc8, 0xbf, 0x83, 0xe7,
	0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x62, 0xf2, 0x42, 0x81, 0xbf, 0x04, 0x00, 0x00,
}

func (m *StakeAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakeAmount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakeAmount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Amount[iNdEx].Size()
				i -= size
				if _, err := m.Amount[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegationCosmos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationCosmos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationCosmos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Stake.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IncomingTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncomingTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncomingTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TxResponse.Size()
		i -= size
		if _, err := m.TxResponse.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *OutgoingTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutgoingTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutgoingTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TxBody.Size()
		i -= size
		if _, err := m.TxBody.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OutgoingTxn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.IncomingTxn) > 0 {
		for iNdEx := len(m.IncomingTxn) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncomingTxn[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CosmosDelegations) > 0 {
		for iNdEx := len(m.CosmosDelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CosmosDelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StakeAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *DelegationCosmos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.Stake.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *IncomingTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TxResponse.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *OutgoingTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TxBody.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.CosmosDelegations) > 0 {
		for _, e := range m.CosmosDelegations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.IncomingTxn) > 0 {
		for _, e := range m.IncomingTxn {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.OutgoingTxn.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StakeAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakeAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakeAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Coin
			m.Amount = append(m.Amount, v)
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationCosmos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationCosmos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationCosmos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncomingTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncomingTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncomingTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxResponse", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TxResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutgoingTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutgoingTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutgoingTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBody", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TxBody.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosDelegations = append(m.CosmosDelegations, DelegationCosmos{})
			if err := m.CosmosDelegations[len(m.CosmosDelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncomingTxn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncomingTxn = append(m.IncomingTxn, IncomingTx{})
			if err := m.IncomingTxn[len(m.IncomingTxn)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingTxn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutgoingTxn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
